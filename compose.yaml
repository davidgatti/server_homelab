services:
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Europe/Rome}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=peer
    volumes:
      - postgres-data:/var/lib/postgresql/data
    labels:
      - "prometheus.scrape=false"
      - "prometheus.job=postgres"
    networks:
      homelab:
        ipv4_address: ${POSTGRES_IP}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    user: postgres
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-1G}
        reservations:
          memory: ${POSTGRES_MEMORY_RESERVATION:-512M}

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Europe/Rome}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=${WATCHTOWER_SCHEDULE:-0 0 4 * * *}
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_NOTIFICATIONS=${WATCHTOWER_NOTIFICATIONS:-shoutrrr}
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8080"
      - "prometheus.job=watchtower"
      - "prometheus.path=/v1/metrics"
    networks:
      homelab:
        ipv4_address: ${WATCHTOWER_IP}
    deploy:
      resources:
        limits:
          memory: ${WATCHTOWER_MEMORY_LIMIT:-256M}
        reservations:
          memory: ${WATCHTOWER_MEMORY_RESERVATION:-128M}

  postgres-backup:
    image: prodrigestivill/postgres-backup-local
    container_name: postgres-backup
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Europe/Rome}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_EXTRA_OPTS=${POSTGRES_BACKUP_OPTS:--Z6 --schema-only --blobs}
      - SCHEDULE=${POSTGRES_BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_KEEP_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_KEEP_WEEKS=${POSTGRES_BACKUP_KEEP_WEEKS:-4}
      - BACKUP_KEEP_MONTHS=${POSTGRES_BACKUP_KEEP_MONTHS:-6}
      - HEALTHCHECK_PORT=8080
    volumes:
      - postgres-backups:/backups
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8080"
      - "prometheus.job=postgres-backup"
      - "prometheus.path=/metrics"
    networks:
      homelab:
        ipv4_address: ${POSTGRES_BACKUP_IP}
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_BACKUP_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${POSTGRES_BACKUP_MEMORY_RESERVATION:-256M}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 5m
      timeout: 3s
      retries: 3
      start_period: 30s

  volume-backup:
    image: offen/docker-volume-backup:latest
    container_name: volume-backup
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Europe/Rome}
      - BACKUP_CRON_EXPRESSION=${VOLUME_BACKUP_SCHEDULE:-0 3 * * *}
      - BACKUP_FILENAME=backup-%Y%m%d-%H%M%S.tar.gz
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_STOP_DURING_BACKUP_LABEL=docker-volume-backup.stop-during-backup=true
    labels:
      - "prometheus.scrape=false"
      - "prometheus.job=volume-backup"
    volumes:
      - postgres-data:/backup/postgres-data:ro
      - postgres-backups:/backup/postgres-backups:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${BACKUP_DIR}/volumes:/archive
    networks:
      homelab:
        ipv4_address: ${VOLUME_BACKUP_IP}
    deploy:
      resources:
        limits:
          memory: ${VOLUME_BACKUP_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${VOLUME_BACKUP_MEMORY_RESERVATION:-256M}

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Europe/Rome}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_LISTEN_PORT=80
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_LOGIN_BANNER="HomeLab PostgreSQL Admin"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    labels:
      - "prometheus.scrape=false"
      - "prometheus.job=pgadmin"
    networks:
      homelab:
        ipv4_address: ${PGADMIN_IP}
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: ${PGADMIN_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${PGADMIN_MEMORY_RESERVATION:-256M}

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "0"
    environment:
      - TZ=${TZ:-Europe/Rome}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=80"
      - "prometheus.job=grafana"
      - "prometheus.path=/metrics"
    networks:
      homelab:
        ipv4_address: ${GRAFANA_IP}
    deploy:
      resources:
        limits:
          memory: ${GRAFANA_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${GRAFANA_MEMORY_RESERVATION:-256M}

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    user: "0"
    environment:
      - TZ=${TZ:-Europe/Rome}
    volumes:
      - prometheus-data:/prometheus
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=80"
      - "prometheus.job=prometheus"
      - "prometheus.path=/metrics"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:80'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      homelab:
        ipv4_address: ${PROMETHEUS_IP}
    deploy:
      resources:
        limits:
          memory: ${PROMETHEUS_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${PROMETHEUS_MEMORY_RESERVATION:-256M}

volumes:
  postgres-data:
    driver: local
  postgres-backups:
    driver: local
  pgadmin-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  homelab:
    name: homelab
    driver: macvlan
    driver_opts:
      parent: ${NETWORK_INTERFACE:-eno1}
    ipam:
      config:
        - subnet: 192.168.3.0/24
          gateway: 192.168.3.1