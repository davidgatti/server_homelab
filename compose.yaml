services:
  speedtest:
    image: openspeedtest/latest
    container_name: speedtest
    hostname: speedtest
    restart: unless-stopped
    labels:
      - "homelab.description=Local network speed test server for bandwidth testing"
      - "homelab.purpose=Self-hosted speed test to measure network performance without external dependencies"
      - "homelab.category=network"
      - "homelab.access=HTTP port 80"
      - "homelab.docs=https://github.com/openspeedtest/Speed-Test"
    environment:
      - TZ=Europe/Rome
      - CHANGE_CONTAINER_PORTS=True
      - HTTP_PORT=80
    volumes:
      - speedtest-logs:/var/log/letsencrypt
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.10
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:0a  # 10 → 0x0A
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M        # Lightweight speed test server
          cpus: '0.2'         # Can spike during speed tests
        reservations:
          memory: 64M         # Small guaranteed allocation
          cpus: '0.05'        # 5% CPU minimum

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    restart: unless-stopped
    labels:
      - "homelab.description=In-memory data structure store used as cache and session storage"
      - "homelab.purpose=High-performance caching layer with persistence for application data"
      - "homelab.category=cache"
      - "homelab.memory=256MB max with LRU eviction"
      - "homelab.persistence=AOF + RDB snapshots"
      - "homelab.docs=https://redis.io/docs/"
    environment:
      - TZ=Europe/Rome
    volumes:
      - redis-data:/data
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.11
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:0b  # 11 → 0x0B
    command:
      - redis-server
      - --appendonly yes
      - --appendfsync everysec
      - --save 900 1
      - --save 300 10
      - --save 60 10000
      - --maxmemory 256mb
      - --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 300M        # Redis with persistence and caching
          cpus: '0.2'         # Light CPU usage for caching
        reservations:
          memory: 100M        # Guaranteed memory for data
          cpus: '0.05'        # 5% CPU minimum

  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    labels:
      - "homelab.description=Primary PostgreSQL database server for application data storage"
      - "homelab.purpose=Relational database with ACID compliance for persistent data storage"
      - "homelab.category=database"
      - "homelab.docs=https://www.postgresql.org/docs/"
    environment:
      - TZ=Europe/Rome
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=default
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=peer
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.12
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:35  # 53 → 0x35
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d default"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    user: postgres
    deploy:
      resources:
        limits:
          memory: 800M        # Conservative for low-RAM system
          cpus: '0.8'         # 80% of one core max (Celeron-friendly)
        reservations:
          memory: 400M        # Guaranteed for database performance
          cpus: '0.2'         # 20% guaranteed

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    hostname: qdrant
    restart: unless-stopped
    labels:
      - "homelab.description=Vector database for AI/ML applications with similarity search capabilities"
      - "homelab.purpose=High-performance vector storage and search engine for embeddings and neural network outputs"
      - "homelab.category=database"
      - "homelab.access=HTTP API port 80, gRPC port 6334"
      - "homelab.persistence=Persistent vector storage with HNSW indexing"
      - "homelab.docs=https://qdrant.tech/documentation/"
    environment:
      - TZ=Europe/Rome
      - QDRANT__SERVICE__HTTP_PORT=80
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.13
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:0d  # 13 → 0x0D
    healthcheck:
      test: ["CMD-SHELL", "timeout 10 bash -c '</dev/tcp/localhost/80' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M        # Vector database can be memory intensive
          cpus: '0.5'         # Vector operations can be CPU intensive
        reservations:
          memory: 256M        # Guaranteed memory for vector storage
          cpus: '0.1'         # 10% CPU minimum

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    hostname: n8n
    restart: unless-stopped
    labels:
      - "homelab.description=Workflow automation platform for connecting apps and services"
      - "homelab.purpose=Low-code/no-code automation tool for integrating various APIs and services"
      - "homelab.category=automation"
      - "homelab.access=Web UI on port 80"
      - "homelab.features=Visual workflow builder, API integrations, scheduling, webhooks"
      - "homelab.docs=https://docs.n8n.io/"
    environment:
      - TZ=Europe/Rome
      - GENERIC_TIMEZONE=Europe/Rome
      - N8N_SECURE_COOKIE=false
      - N8N_PORT=80
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.14
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:0e  # 14 → 0x0E
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 1024M        # n8n can be memory intensive with complex workflows
          cpus: '0.4'         # Workflow execution can be CPU intensive
        reservations:
          memory: 1024M        # Guaranteed memory for workflow execution
          cpus: '0.1'         # 10% CPU minimum

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    hostname: homeassistant
    restart: unless-stopped
    labels:
      - "homelab.description=Home automation platform for controlling IoT devices and sensors"
      - "homelab.purpose=Centralized smart home control with device integration and automation rules"
      - "homelab.category=automation"
      - "homelab.access=Web UI on port 80"
      - "homelab.depends=postgres,redis"
      - "homelab.features=Device discovery, automation, dashboards, mobile apps"
      - "homelab.docs=https://www.home-assistant.io/docs/"
    user: "0"
    environment:
      - TZ=Europe/Rome
    volumes:
      - homeassistant-config:/config
      - /run/dbus:/run/dbus:ro
    devices:
      - "/dev/bus/usb:/dev/bus/usb"
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.15
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:0f  # 15 → 0x0F
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fL", "http://localhost"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    hostname: jellyfin
    restart: unless-stopped
    labels:
      - "homelab.description=Media server for streaming movies, TV shows, music, and photos"
      - "homelab.purpose=Self-hosted media streaming platform with transcoding and remote access"
      - "homelab.category=media"
      - "homelab.access=Web UI on port 8096"
      - "homelab.features=Hardware transcoding, DLNA/UPnP, mobile apps, live TV"
      - "homelab.storage=/mnt/nas_media (read-only media library)"
      - "homelab.docs=https://jellyfin.org/docs/"
    environment:
      - TZ=Europe/Rome
      - JELLYFIN_PublishedServerUrl=http://${NETWORK_PREFIX:-192.168.5}.16:8096
    volumes:
      - /mnt/nas_media:/media:ro
      - jellyfin-config:/config
      - jellyfin-cache:/cache
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.16
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:10  # 16 → 0x10
    # No healthcheck as per production configuration
    deploy:
      resources:
        limits:
          memory: 2G          # Media transcoding can be memory intensive
          cpus: '1.0'         # Hardware transcoding benefits from CPU allocation
        reservations:
          memory: 512M        # Guaranteed memory for media server
          cpus: '0.2'         # 20% CPU minimum for streaming

  docmost:
    image: docmost/docmost:latest
    container_name: docmost
    hostname: docmost
    restart: unless-stopped
    labels:
      - "homelab.description=Collaborative documentation platform with real-time editing"
      - "homelab.purpose=Team wiki and knowledge base with markdown support and version control"
      - "homelab.category=documentation"
      - "homelab.access=Web UI on port 80"
      - "homelab.depends=postgres,redis"
      - "homelab.docs=https://docmost.com/docs/"
    environment:
      - TZ=Europe/Rome
      - DATABASE_URL=postgresql://admin:password@postgres:5432/docmost
      - REDIS_URL=redis://redis:6379
      - APP_URL=http://${NETWORK_PREFIX:-192.168.5}.17
      - APP_SECRET=303ddc5b0df7209faa0135bc9f528826d02c0a9d6ce019dd6a267d4b0c3c142a
      - PORT=80
    volumes:
      - docmost-data:/app/data
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.17
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:11  # 17 → 0x11
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 10 bash -c '</dev/tcp/localhost/80' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M        # Documentation platform with real-time features
          cpus: '0.4'         # Moderate CPU for document processing
        reservations:
          memory: 256M        # Guaranteed memory for application
          cpus: '0.1'         # 10% CPU minimum

  cups:
    image: unixorn/cupsd:latest
    container_name: cups
    hostname: cups
    restart: unless-stopped
    labels:
      - "homelab.description=Network print server for managing local and network printers"
      - "homelab.purpose=Centralized printer management with web interface and IPP protocol support"
      - "homelab.category=printing"
      - "homelab.access=Web UI on port 80, IPP on port 631"
      - "homelab.docs=https://www.cups.org/doc/"
    user: "0"
    environment:
      - TZ=Europe/Rome
    volumes:
      - cups-config:/etc/cups
      - cups-logs:/var/log/cups
      - /var/run/dbus:/var/run/dbus:ro
      - /etc/machine-id:/etc/machine-id:ro
    devices:
      - "/dev/bus/usb:/dev/bus/usb"
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.18
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:12  # 18 → 0x12
    healthcheck:
      test: ["CMD-SHELL", "timeout 10 bash -c '</dev/tcp/localhost/631' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    privileged: true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    hostname: watchtower
    restart: unless-stopped
    labels:
      - "homelab.description=Automatic Docker container updater - monitors and updates containers to latest versions"
      - "homelab.purpose=Container lifecycle management and automated updates scheduled at 4 AM daily"
      - "homelab.category=automation"
      - "homelab.schedule=0 0 4 * * * (4 AM daily)"
      - "homelab.docs=https://containrrr.dev/watchtower/"
    environment:
      - TZ=Europe/Rome
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.19
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:36  # 54 → 0x36
    deploy:
      resources:
        limits:
          memory: 128M        # Watchtower is very lightweight
          cpus: '0.1'         # Minimal CPU for background task
        reservations:
          memory: 64M         # Small guaranteed allocation
          cpus: '0.05'        # 5% CPU minimum

  postgres-backup:
    image: prodrigestivill/postgres-backup-local
    container_name: postgres-backup
    hostname: pg-backup
    restart: unless-stopped
    labels:
      - "homelab.description=Automated PostgreSQL database backup service with retention policies"
      - "homelab.purpose=Creates compressed daily backups of PostgreSQL databases with rotation"
      - "homelab.category=backup"
      - "homelab.schedule=0 2 * * * (2 AM daily)"
      - "homelab.retention=30 days, 4 weeks, 6 months"
      - "homelab.docs=https://github.com/prodrigestivill/docker-postgres-backup-local"
    environment:
      - TZ=Europe/Rome
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=default
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_EXTRA_OPTS=-Z6 --schema-only --blobs
      - SCHEDULE=0 2 * * *
      - BACKUP_KEEP_DAYS=30
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080
    volumes:
      - /home/research/homelab/backups/databases/postgres:/backups
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.20
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:37  # 55 → 0x37
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M        # Sufficient for database dump buffering
          cpus: '0.3'         # 30% CPU max for backup operations
        reservations:
          memory: 128M        # Guaranteed for basic operations
          cpus: '0.1'         # 10% CPU minimum

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    hostname: alertmanager
    restart: unless-stopped
    labels:
      - "homelab.description=Prometheus alert routing and notification management system"
      - "homelab.purpose=Handles alerts from Prometheus and routes notifications via email/webhook/etc"
      - "homelab.category=monitoring"
      - "homelab.depends=prometheus"
      - "homelab.docs=https://prometheus.io/docs/alerting/latest/alertmanager/"
    environment:
      - TZ=Europe/Rome
    volumes:
      - alertmanager-data:/alertmanager
      - ./configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.21
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:38  # 56 → 0x38
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://${NETWORK_PREFIX:-192.168.5}.21'
      - '--web.listen-address=0.0.0.0:80'
      - '--cluster.listen-address=0.0.0.0:9094'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 200M        # AlertManager for notifications
          cpus: '0.2'         # Light alerting service
        reservations:
          memory: 100M        # Reasonable guarantee
          cpus: '0.05'        # Minimal CPU when idle

  volume-backup:
    image: offen/docker-volume-backup:latest
    container_name: volume-backup
    hostname: vol-backup
    restart: unless-stopped
    labels:
      - "homelab.description=Docker volume backup service - creates compressed archives of Docker volumes"
      - "homelab.purpose=Backup Docker volumes and file systems with automated retention management"
      - "homelab.category=backup"
      - "homelab.schedule=0 3 * * * (3 AM daily)"
      - "homelab.retention=30 days"
      - "homelab.docs=https://github.com/offen/docker-volume-backup"
    environment:
      - TZ=Europe/Rome
      - BACKUP_CRON_EXPRESSION=0 3 * * *
      - BACKUP_FILENAME=backup-%Y%m%d-%H%M%S.tar.gz
      - BACKUP_RETENTION_DAYS=30
      - BACKUP_STOP_DURING_BACKUP_LABEL=docker-volume-backup.stop-during-backup=true
    volumes:
      - postgres-data:/backup/postgres-data:ro
      - grafana-data:/backup/grafana-data:ro
      - n8n-data:/backup/n8n-data:ro
      - homeassistant-config:/backup/homeassistant-config:ro
      - qdrant-data:/backup/qdrant-data:ro
      - pgadmin-data:/backup/pgadmin-data:ro
      - /home/research/homelab/backups/postgres:/backup/postgres:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /home/research/homelab/backups/volumes:/archive
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.22
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:39  # 57 → 0x39
    healthcheck:
      test: ["CMD", "pgrep", "-f", "backup"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M        # Backup can spike but should be limited
          cpus: '0.3'         # Backup I/O intensive but short bursts
        reservations:
          memory: 128M        # Minimal guaranteed
          cpus: '0.05'        # Very low CPU when idle

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    hostname: pgadmin
    restart: unless-stopped
    labels:
      - "homelab.description=Web-based PostgreSQL administration and development platform"
      - "homelab.purpose=Database management interface for PostgreSQL with query editor and monitoring"
      - "homelab.category=database-admin"
      - "homelab.access=admin@example.com / password"
      - "homelab.docs=https://www.pgadmin.org/docs/"
    environment:
      - TZ=Europe/Rome
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=password
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.23
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:3a  # 58 → 0x3A
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 300M        # pgAdmin web interface (HomeLab usage)
          cpus: '0.25'        # Light web interface
        reservations:
          memory: 150M        # Reasonable guarantee
          cpus: '0.05'        # Minimal CPU when idle

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    labels:
      - "homelab.description=Time series database and monitoring system for metrics collection"
      - "homelab.purpose=Scrapes metrics from exporters, stores time series data, and triggers alerts"
      - "homelab.category=monitoring"
      - "homelab.retention=200h (8+ days)"
      - "homelab.targets=postgres-exporter,redis-exporter,cadvisor,blackbox-exporter"
      - "homelab.docs=https://prometheus.io/docs/"
    user: "0"
    environment:
      - TZ=Europe/Rome
    volumes:
      - prometheus-data:/prometheus
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/rules:/etc/prometheus/rules:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:80'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.24
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:3b  # 59 → 0x3B
    depends_on:
      postgres-exporter:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 500M        # Prometheus needs memory for time series data
          cpus: '0.6'         # Can be CPU intensive during scraping
        reservations:
          memory: 250M        # Guaranteed for metrics storage
          cpus: '0.15'        # 15% CPU minimum

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    labels:
      - "homelab.description=Data visualization and monitoring dashboard platform"
      - "homelab.purpose=Create dashboards and visualizations for metrics from Prometheus and logs from Loki"
      - "homelab.category=monitoring"
      - "homelab.access=admin / admin"
      - "homelab.depends=prometheus,loki"
      - "homelab.docs=https://grafana.com/docs/"
    user: "0"
    environment:
      - TZ=Europe/Rome
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_METRICS_ENABLED=true
      - GF_SERVER_HTTP_PORT=80
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/etc/grafana/dashboards:ro
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.25
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:3c  # 60 → 0x3C
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 400M        # Grafana for HomeLab dashboards
          cpus: '0.4'         # Can be CPU intensive with complex dashboards
        reservations:
          memory: 200M        # Reasonable guarantee for web interface
          cpus: '0.1'         # 10% CPU minimum

  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox-exporter
    hostname: blackbox
    restart: unless-stopped
    labels:
      - "homelab.description=External service monitoring via HTTP/HTTPS/DNS/TCP/ICMP probes"
      - "homelab.purpose=Monitor website uptime, API health, and network connectivity from external perspective"
      - "homelab.category=monitoring"
      - "homelab.warning=Can generate significant internet traffic if monitoring external sites"
      - "homelab.docs=https://github.com/prometheus/blackbox_exporter"
    environment:
      - TZ=Europe/Rome
    volumes:
      - ./configs/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    command:
      - '--web.listen-address=0.0.0.0:80'
      - '--config.file=/etc/blackbox_exporter/config.yml'
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.26
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:3d  # 61 → 0x3D
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 100M        # Lightweight HTTP/TCP/DNS prober
          cpus: '0.1'         # Minimal CPU for periodic checks
        reservations:
          memory: 50M         # Small guaranteed allocation
          cpus: '0.02'        # 2% CPU minimum

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    hostname: cadvisor
    restart: unless-stopped
    labels:
      - "homelab.description=Container resource usage and performance metrics exporter"
      - "homelab.purpose=Monitors Docker containers CPU, memory, disk, and network usage for Prometheus"
      - "homelab.category=monitoring"
      - "homelab.privileged=true (requires system access for container monitoring)"
      - "homelab.docs=https://github.com/google/cadvisor"
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    command:
      - '--port=80'
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.27
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:3e  # 62 → 0x3E
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 200M        # cAdvisor is lightweight monitoring
          cpus: '0.2'         # Low CPU for container metrics
        reservations:
          memory: 100M        # Small guaranteed allocation
          cpus: '0.05'        # Minimal CPU guarantee

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    hostname: pg-exporter
    restart: unless-stopped
    labels:
      - "homelab.description=PostgreSQL metrics exporter for Prometheus monitoring"
      - "homelab.purpose=Exposes PostgreSQL database metrics: connections, queries, I/O, locks, replication"
      - "homelab.category=monitoring"
      - "homelab.depends=postgres"
      - "homelab.docs=https://github.com/prometheus-community/postgres_exporter"
    environment:
      - TZ=Europe/Rome
      - DATA_SOURCE_NAME=postgresql://admin:password@postgres:5432/default?sslmode=disable
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.28
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:40  # 64 → 0x40
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 100M        # Very lightweight metrics exporter
          cpus: '0.1'         # Minimal CPU for metrics export
        reservations:
          memory: 50M         # Small guaranteed allocation
          cpus: '0.02'        # 2% CPU minimum

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    hostname: redis-exporter
    restart: unless-stopped
    labels:
      - "homelab.description=Redis metrics exporter for Prometheus monitoring"
      - "homelab.purpose=Exposes Redis performance metrics: memory usage, commands, connections, keys"
      - "homelab.category=monitoring"
      - "homelab.depends=redis"
      - "homelab.docs=https://github.com/oliver006/redis_exporter"
    environment:
      - TZ=Europe/Rome
      - REDIS_ADDR=redis://redis:6379
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.29
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:41  # 65 → 0x41
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/redis_exporter", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 50M         # Very lightweight metrics exporter
          cpus: '0.1'         # Minimal CPU for metrics export
        reservations:
          memory: 25M         # Small guaranteed allocation
          cpus: '0.02'        # 2% CPU minimum

  loki:
    image: grafana/loki:latest
    container_name: loki
    hostname: loki
    restart: unless-stopped
    labels:
      - "homelab.description=Log aggregation system for collecting and indexing application logs"
      - "homelab.purpose=Centralized log storage and querying backend for Grafana log exploration"
      - "homelab.category=logging"
      - "homelab.indexing=Label-based log indexing (like Prometheus for logs)"
      - "homelab.docs=https://grafana.com/docs/loki/"
    user: "0"
    environment:
      - TZ=Europe/Rome
    volumes:
      - loki-data:/loki
      - ./configs/loki/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.30
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:42  # 66 → 0x42
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 200M        # Log storage and processing
          cpus: '0.3'         # Moderate CPU for log indexing
        reservations:
          memory: 150M        # Guaranteed allocation for log storage
          cpus: '0.1'         # 10% CPU minimum

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    hostname: promtail
    restart: unless-stopped
    labels:
      - "homelab.description=Log collection agent that ships Docker container logs to Loki"
      - "homelab.purpose=Scrapes container logs from Docker daemon and forwards to Loki with labels"
      - "homelab.category=logging"
      - "homelab.source=/var/lib/docker/containers (all container logs)"
      - "homelab.depends=loki"
      - "homelab.docs=https://grafana.com/docs/loki/latest/clients/promtail/"
    user: "0"
    environment:
      - TZ=Europe/Rome
    volumes:
      - ./configs/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - promtail-positions:/tmp
    command: -config.file=/etc/promtail/config.yml
    networks:
      homelab:
        ipv4_address: ${NETWORK_PREFIX:-192.168.5}.31
        mac_address: ${MAC_NETWORK_PREFIX:-02:42:48:4C:05}:43  # 67 → 0x43
    depends_on:
      loki:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep promtail | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 50M         # Lightweight log collection agent
          cpus: '0.1'         # Minimal CPU for log parsing
        reservations:
          memory: 30M         # Small guaranteed allocation
          cpus: '0.02'        # 2% CPU minimum

volumes:
  postgres-data:
    driver: local
  postgres-backup-data:
    driver: local
  pgadmin-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  alertmanager-data:
    driver: local
  redis-data:
    driver: local
  speedtest-logs:
    driver: local
  qdrant-data:
    driver: local
  n8n-data:
    driver: local
  loki-data:
    driver: local
  promtail-positions:
    driver: local
  jellyfin-config:
    driver: local
  jellyfin-cache:
    driver: local
  docmost-data:
    driver: local
  homeassistant-config:
    driver: local
  cups-config:
    driver: local
  cups-logs:
    driver: local

networks:
  homelab:
    name: homelab
    driver: macvlan
    driver_opts:
      parent: ${NETWORK_INTERFACE:-eno1}
    ipam:
      config:
        - subnet: ${NETWORK_PREFIX:-192.168.5}.0/24
          gateway: ${NETWORK_PREFIX:-192.168.5}.1
