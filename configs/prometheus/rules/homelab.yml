groups:
- name: homelab.rules
  rules:
  # Service availability alerts
  - alert: ServiceDown
    expr: up == 0
    for: 30s
    labels:
      severity: critical
    annotations:
      summary: "Service {{ $labels.instance }} is down"
      description: "{{ $labels.job }} on {{ $labels.instance }} has been down for more than 30 seconds."

  # High memory usage alert
  - alert: HighMemoryUsage
    expr: (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 < 10
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "High memory usage on {{ $labels.instance }}"
      description: "Memory usage is above 90% on {{ $labels.instance }}."

  # High CPU usage alert
  - alert: HighCPUUsage
    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "High CPU usage on {{ $labels.instance }}"
      description: "CPU usage is above 80% on {{ $labels.instance }}."

  # Docker container alerts
  - alert: ContainerKilled
    expr: time() - container_last_seen > 60
    for: 0m
    labels:
      severity: warning
    annotations:
      summary: "Container killed on {{ $labels.instance }}"
      description: "A container has disappeared on {{ $labels.instance }}."

  - alert: ContainerCpuUsage
    expr: (sum(rate(container_cpu_usage_seconds_total[3m])) BY (instance, name) * 100) > 80
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "Container CPU usage on {{ $labels.instance }}"
      description: "Container CPU usage is above 80% on {{ $labels.instance }}."

  - alert: ContainerMemoryUsage
    expr: (sum(container_memory_working_set_bytes) BY (instance, name) / sum(container_spec_memory_limit_bytes > 0) BY (instance, name) * 100) > 80
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "Container Memory usage on {{ $labels.instance }}"
      description: "Container Memory usage is above 80% on {{ $labels.instance }}."

  # PostgreSQL specific alerts
  - alert: PostgresqlDown
    expr: pg_up == 0
    for: 0m
    labels:
      severity: critical
    annotations:
      summary: "Postgresql down on {{ $labels.instance }}"
      description: "Postgresql database is down on {{ $labels.instance }}."

  - alert: PostgresqlTooManyConnections
    expr: sum by (datname) (pg_stat_activity_count{datname!~"template.*|postgres"}) > pg_settings_max_connections * 0.8
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "Postgresql too many connections on {{ $labels.instance }}"
      description: "PostgreSQL instance {{ $labels.instance }} has too many connections ({{ $value }})."

  # Watchdog alert - ensures alerting is working
  - alert: Watchdog
    expr: vector(1)
    labels:
      severity: none
    annotations:
      summary: "Watchdog alert"
      description: "This is a watchdog alert to ensure the alerting pipeline is functional."
